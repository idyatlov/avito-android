package com.avito.android.baseline_profile

import com.avito.git.Git
import com.avito.test.gradle.file
import com.avito.test.gradle.gradlew
import com.google.common.truth.Truth
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import java.io.File
import java.nio.file.Path
import kotlin.io.path.listDirectoryEntries
import kotlin.io.path.name

class ApplyBaselineProfilePluginTest {

    @field:TempDir
    lateinit var projectDirectory: File

    private lateinit var git: Git

    @BeforeEach
    fun setup(@TempDir projectDir: File) {
        this.projectDirectory = projectDir
        git = Git.create(projectDirectory)
    }

    @Test
    fun `configuration success`() {
        generateProject()

        val result = gradlew(
            projectDirectory,
            "help",
            dryRun = true,
        )

        result.assertThat().buildSuccessful()
    }

    @Test
    fun `configuration success - kts`() {
        generateProject(useKts = true)

        val result = gradlew(
            projectDirectory,
            "help",
            dryRun = true,
        )

        result.assertThat().buildSuccessful()
    }

    @Test
    fun `task generated by plugin applies subtasks in correct order`() {
        val projectSetup = ProjectSetup(saveToVersionControl = true)

        generateProject(projectSetup)

        val result = gradlew(
            projectDirectory,
            projectSetup.pluginTaskName,
            dryRun = true,
        )

        result
            .assertThat()
            .buildSuccessful()
            .tasksShouldBeTriggered(
                *pluginTasksPipeline(projectSetup).toTypedArray()
            ).inOrder()
    }

    @Test
    fun `file produced by instrumentation task is copied to app main directory`() {
        val projectSetup = ProjectSetup(generatedProfileFileName = "some-date-prefix-2023-12-12-baseline-prof.txt")

        generateProject(projectSetup)

        gradlew(
            projectDirectory,
            projectSetup.pluginTaskName,
        )

        val mainDirectoryFiles = applicationMainDirectory(projectSetup)
            .listDirectoryEntries()
            .map { it.name }
        Truth.assertThat(mainDirectoryFiles)
            .contains("baseline-prof.txt")
    }

    @Test
    fun `task performs actual commit with baseline profile`() {
        val releaseBranchName = "release/150.0"
        val projectSetup = ProjectSetup(
            saveToVersionControl = true,
            checkoutBranchName = releaseBranchName,
        )

        generateProject(projectSetup)

        gradlew(
            projectDirectory,
            projectSetup.pluginTaskName,
        )

        Truth.assertThat(git.tagsAtHeadOf(releaseBranchName))
            .containsExactly("baseline-profile-release/150.0")
    }

    @Test
    fun `task does nothing when previous commit already contains profile`() {
        val projectSetup = ProjectSetup(
            saveToVersionControl = true,
            checkoutBranchName = "release/150.0",
        )

        generateProject(projectSetup)

        gradlew(
            projectDirectory,
            projectSetup.pluginTaskName,
        )

        val secondRunAfterCommit = gradlew(
            projectDirectory,
            projectSetup.pluginTaskName,
        )

        secondRunAfterCommit
            .assertThat()
            .buildSuccessful()
            .tasksShouldNotBeTriggered(
                *pluginTasksPipeline(projectSetup).toTypedArray()
            )
    }

    @Test
    fun `when task executed second time after code changes, profile applied and git tags updated`() {
        val projectSetup = ProjectSetup(
            saveToVersionControl = true,
            checkoutBranchName = "release/150.0",
        )

        generateProject(projectSetup)

        gradlew(
            projectDirectory,
            projectSetup.pluginTaskName,
        )

        Truth.assertThat(git.commitsOneLiners())
            .containsExactly(
                "(HEAD -> refs/heads/release/150.0, tag: refs/tags/baseline-profile-release/150.0) " +
                    "Update baseline profile for latest code changes",
                "(refs/heads/master) initial_state"
            ).inOrder()

        commitAnyNewFileToSources(projectSetup, commitMessage = "Update application code")

        gradlew(
            projectDirectory,
            projectSetup.pluginTaskName,
        )

        Truth.assertThat(git.commitsOneLiners())
            .containsExactly(
                "(HEAD -> refs/heads/release/150.0, tag: refs/tags/baseline-profile-release/150.0) " +
                    "Update baseline profile for latest code changes",
                "Update application code",
                "Update baseline profile for latest code changes",
                "(refs/heads/master) initial_state"
            ).inOrder()
    }

    private fun commitAnyNewFileToSources(setup: ProjectSetup, commitMessage: String) {
        applicationMainDirectory(setup).resolve("kotlin").toFile().file(
            "SourceFile.kt",
            """
                package com.avito.android
                
                class Something {}
            """.trimIndent()
        )

        git.addAll().getOrThrow()
        git.commit(commitMessage).getOrThrow()
    }

    private fun generateProject(
        setup: ProjectSetup = ProjectSetup(),
        useKts: Boolean = false,
    ) = PluginTestProject.generate(setup, useKts, projectDirectory, git)

    private fun pluginTasksPipeline(projectSetup: ProjectSetup) = listOf(
        ":${projectSetup.appModuleName}:assembleBenchmark",
        ":${projectSetup.testModuleName}:${projectSetup.instrumentationTaskName}",
        ":${projectSetup.testModuleName}:copyProfileToSourcesAndSaveToVcs",
    )

    private fun applicationMainDirectory(projectSetup: ProjectSetup): Path =
        projectDirectory.toPath()
            .resolve(projectSetup.appModuleName)
            .resolve("src")
            .resolve("main")
}

private fun Git.tagsAtHeadOf(branchName: String): List<String> =
    tryParseRev(branchName)
        .flatMap { headHash ->
            tryParseTags(headHash).map { tags -> tags.split("\n") }
        }.getOrThrow()

private fun Git.commitsOneLiners(): List<String> =
    log(options = "--tags --pretty=\"%d %s\" --decorate=full")
        .map { output ->
            output
                .split("\n")
                .map { it.trim() }
        }.getOrThrow()
